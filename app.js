// –û—Å–Ω–æ–≤–∏ –Ω–∞ –ø—Ä–∞–≤–æ—Ç–æ ‚Äì SPA –∑–∞ 11 –∫–ª–∞—Å (–ü–æ–ø—Ä–∞–≤–µ–Ω–∞ –≤–µ—Ä—Å–∏—è)
// =========================================================

// –î–∞–Ω–Ω–∏ –∑–∞ –≤—Å–∏—á–∫–∏ 15 —Ç–µ–º–∏
const TOPICS_DATA = {
  "topics": [
    {
      "id": 1,
      "title": "–°—ä—â–Ω–æ—Å—Ç, —Å–∏—Å—Ç–µ–º–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏ –Ω–∞ –ø—Ä–∞–≤–æ—Ç–æ. –ú–µ—Ç–æ–¥–∏ –Ω–∞ –ø—Ä–∞–≤–Ω–æ —Ä–µ–≥—É–ª–∏—Ä–∞–Ω–µ.",
      "theory": `
        <div class="topic-section">
          <h3>üîç –°—ä—â–Ω–æ—Å—Ç –Ω–∞ –ø—Ä–∞–≤–æ—Ç–æ</h3>
          <p><strong class="term" data-tooltip="–°–∏—Å—Ç–µ–º–∞ –æ—Ç –æ–±—â–æ–∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, —É—Ç–≤—ä—Ä–¥–µ–Ω–∏ –∏–ª–∏ —Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–∞–Ω–∏ –æ—Ç –¥—ä—Ä–∂–∞–≤–∞—Ç–∞">–ü—Ä–∞–≤–æ—Ç–æ</strong> –µ –æ—Å–Ω–æ–≤–Ω–∞—Ç–∞ —Ä–µ–≥—É–ª–∞—Ç–∏–≤–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –≤ –æ–±—â–µ—Å—Ç–≤–æ—Ç–æ, –∫–æ—è—Ç–æ –æ—Å–∏–≥—É—Ä—è–≤–∞ —Ä–µ–¥ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç —á—Ä–µ–∑ —É—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –æ–±—â–æ–∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.</p>
          
          <h3>üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –ø—Ä–∞–≤–Ω–∞—Ç–∞ –Ω–æ—Ä–º–∞</h3>
          <ol>
            <li><span class="term" data-tooltip="–û–ø–∏—Å–≤–∞ —É—Å–ª–æ–≤–∏—è—Ç–∞, –ø—Ä–∏ –∫–æ–∏—Ç–æ —Å–µ –ø—Ä–∏–ª–∞–≥–∞ –Ω–æ—Ä–º–∞—Ç–∞">–•–∏–ø–æ—Ç–µ–∑–∞</span> - —É—Å–ª–æ–≤–∏–µ –∑–∞ –ø—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∞</li>
            <li><span class="term" data-tooltip="–°–∞–º–æ—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ">–î–∏—Å–ø–æ–∑–∏—Ü–∏—è</span> - –ø—Ä–∞–≤–∏–ª–æ—Ç–æ –∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–ø—Ä–∞–≤–æ, –∑–∞–¥—ä–ª–∂–µ–Ω–∏–µ, –∑–∞–±—Ä–∞–Ω–∞)</li>
            <li><span class="term" data-tooltip="–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∏—Ç–µ –ø–æ—Å–ª–µ–¥–∏—Ü–∏ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ">–°–∞–Ω–∫—Ü–∏—è</span> - –ø–æ—Å–ª–µ–¥–∏—Ü–∞ –ø—Ä–∏ –Ω–µ—Å–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∞</li>
          </ol>

          <h3>üìö –ò–∑—Ç–æ—á–Ω–∏—Ü–∏ –Ω–∞ –ø—Ä–∞–≤–æ—Ç–æ (–π–µ—Ä–∞—Ä—Ö–∏—è)</h3>
          <div class="sources-hierarchy">
            <div class="source-level">1. <span class="term" data-tooltip="–û—Å–Ω–æ–≤–Ω–∏—è—Ç –∑–∞–∫–æ–Ω –Ω–∞ –¥—ä—Ä–∂–∞–≤–∞—Ç–∞ —Å –Ω–∞–π-–≤–∏—Å–æ–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∞ —Å–∏–ª–∞">–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è</span></div>
            <div class="source-level">2. <span class="term" data-tooltip="–†–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–∏ –∏ –æ–±–Ω–∞—Ä–æ–¥–≤–∞–Ω–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∏ –¥–æ–≥–æ–≤–æ—Ä–∏">–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∏ –¥–æ–≥–æ–≤–æ—Ä–∏</span></div>
            <div class="source-level">3. <span class="term" data-tooltip="–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∏ –∞–∫—Ç–æ–≤–µ, –ø—Ä–∏–µ—Ç–∏ –æ—Ç –ù–∞—Ä–æ–¥–Ω–æ—Ç–æ —Å—ä–±—Ä–∞–Ω–∏–µ">–ó–∞–∫–æ–Ω–∏</span></div>
            <div class="source-level">4. <span class="term" data-tooltip="–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–∞—Ä–µ–¥–±–∏, –ø—Ä–∞–≤–∏–ª–Ω–∏—Ü–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏">–ü–æ–¥–∑–∞–∫–æ–Ω–æ–≤–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∏ –∞–∫—Ç–æ–≤–µ</span></div>
          </div>

          <h3>‚öñÔ∏è –ú–µ—Ç–æ–¥–∏ –Ω–∞ –ø—Ä–∞–≤–Ω–æ —Ä–µ–≥—É–ª–∏—Ä–∞–Ω–µ</h3>
          <ul>
            <li><span class="term" data-tooltip="–ö–∞—Ç–µ–≥–æ—Ä–∏—á–Ω–æ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç –∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ">–ò–º–ø–µ—Ä–∞—Ç–∏–≤–µ–Ω –º–µ—Ç–æ–¥</span> - –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä. –Ω–∞–∫–∞–∑–∞—Ç–µ–ª–Ω–æ –ø—Ä–∞–≤–æ)</li>
            <li><span class="term" data-tooltip="–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—è –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç –∑–∞ –∏–∑–±–æ—Ä –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ –∑–∞–∫–æ–Ω–∞">–î–∏—Å–ø–æ–∑–∏—Ç–∏–≤–µ–Ω –º–µ—Ç–æ–¥</span> - —Å–≤–æ–±–æ–¥–∞ –Ω–∞ –¥–æ–≥–æ–≤–∞—Ä—è–Ω–µ (–Ω–∞–ø—Ä. –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ –ø—Ä–∞–≤–æ)</li>
            <li><span class="term" data-tooltip="–ü—Ä–µ–ø–æ—Ä—ä—á–≤–∞ –∂–µ–ª–∞–Ω–æ—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∞">–ü—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–µ–Ω –º–µ—Ç–æ–¥</span> - –Ω–∞—Å—ä—Ä—á–∞–≤–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ</li>
          </ul>
        </div>
      `,
      "flashcards": [
        {"term": "–ü—Ä–∞–≤–Ω–∞ –Ω–æ—Ä–º–∞", "definition": "–û–±—â–æ–∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–æ–≤–µ–Ω–æ –∏–ª–∏ —Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–∞–Ω–æ –æ—Ç –¥—ä—Ä–∂–∞–≤–∞—Ç–∞."},
        {"term": "–ò–∑—Ç–æ—á–Ω–∏–∫ –Ω–∞ –ø—Ä–∞–≤–æ—Ç–æ", "definition": "–§–æ—Ä–º–∞, –≤ –∫–æ—è—Ç–æ –Ω–∞–º–∏—Ä–∞ –∏–∑—Ä–∞–∑ –ø—Ä–∞–≤–Ω–∞—Ç–∞ –Ω–æ—Ä–º–∞ (–Ω–∞–ø—Ä. –∑–∞–∫–æ–Ω, –ø–æ–¥–∑–∞–∫–æ–Ω–æ–≤ –∞–∫—Ç)."},
        {"term": "–ò–º–ø–µ—Ä–∞—Ç–∏–≤–µ–Ω –º–µ—Ç–æ–¥", "definition": "–ú–µ—Ç–æ–¥ –Ω–∞ –≤–ª–∞—Å—Ç –∏ –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∞–≤–Ω–æ —Ä–µ–≥—É–ª–∏—Ä–∞–Ω–µ - –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω–æ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ."},
        {"term": "–î–∏—Å–ø–æ–∑–∏—Ç–∏–≤–µ–Ω –º–µ—Ç–æ–¥", "definition": "–ú–µ—Ç–æ–¥ –Ω–∞ —Ä–∞–≤–Ω–æ–ø–æ—Å—Ç–∞–≤–µ–Ω–æ—Å—Ç - —Å—Ç—Ä–∞–Ω–∏—Ç–µ –º–æ–≥–∞—Ç –¥–∞ —É—Ä–µ–¥—è—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ç–∞ —Å–∏ –ø–æ —Ä–∞–∑–ª–∏—á–µ–Ω –Ω–∞—á–∏–Ω."}
      ],
      "quiz": [
        {"q": "–ö–æ–π –∞–∫—Ç –∏–º–∞ –Ω–∞–π-–≤–∏—Å–æ–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∞ —Å–∏–ª–∞ –≤ –ë—ä–ª–≥–∞—Ä–∏—è?", "answers": ["–ó–∞–∫–æ–Ω", "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è", "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å–∫–∞ –Ω–∞—Ä–µ–¥–±–∞", "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –ú–°"], "correctIndex": 1, "explanation": "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è—Ç–∞ –µ –≤—ä—Ä—Ö–æ–≤–µ–Ω –∑–∞–∫–æ–Ω —Å–ø–æ—Ä–µ–¥ —á–ª. 5 –ö–†–ë."},
        {"q": "–ö–æ–π –æ—Ç –∏–∑–±—Ä–æ–µ–Ω–∏—Ç–µ –µ –ø—Ä–∏–º–µ—Ä –∑–∞ –Ω–µ–ø–∏—Å–∞–Ω –∏–∑—Ç–æ—á–Ω–∏–∫ –Ω–∞ –ø—Ä–∞–≤–æ—Ç–æ?", "answers": ["–ü—Ä–∞–≤–µ–Ω –æ–±–∏—á–∞–π", "–ó–∞–∫–æ–Ω", "–î–µ–∫—Ä–µ—Ç", "–ù–∞—Ä–µ–¥–±–∞"], "correctIndex": 0, "explanation": "–û–±–∏—á–∞—è—Ç –µ –Ω–µ–ø–∏—Å–∞–Ω –∏–∑—Ç–æ—á–Ω–∏–∫ –Ω–∞ –ø—Ä–∞–≤–æ—Ç–æ."},
        {"q": "–ü—Ä–∏ –∫–æ–π –º–µ—Ç–æ–¥ —Å—É–±–µ–∫—Ç–∏—Ç–µ —Å–∞ —Ä–∞–≤–Ω–æ–ø–æ—Å—Ç–∞–≤–µ–Ω–∏?", "answers": ["–ò–º–ø–µ—Ä–∞—Ç–∏–≤–µ–Ω", "–î–∏—Å–ø–æ–∑–∏—Ç–∏–≤–µ–Ω", "–ü—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–µ–Ω", "–ö–æ–º–±–∏–Ω–∏—Ä–∞–Ω"], "correctIndex": 1, "explanation": "–î–∏—Å–ø–æ–∑–∏—Ç–∏–≤–Ω–∏—è—Ç –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞ —Ä–∞–≤–Ω–æ–ø–æ—Å—Ç–∞–≤–µ–Ω–æ—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ç–µ."},
        {"q": "–•–∏–ø–æ—Ç–µ–∑–∞—Ç–∞ –Ω–∞ –ø—Ä–∞–≤–Ω–∞—Ç–∞ –Ω–æ—Ä–º–∞ —Å—ä–¥—ä—Ä–∂–∞:", "answers": ["–ü—Ä–∞–≤–∏–ª–æ—Ç–æ –∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ", "–£—Å–ª–æ–≤–∏–µ—Ç–æ –∑–∞ –ø—Ä–∏–ª–∞–≥–∞–Ω–µ", "–°–∞–Ω–∫—Ü–∏—è—Ç–∞", "–°—É–±–µ–∫—Ç–∞"], "correctIndex": 1, "explanation": "–•–∏–ø–æ—Ç–µ–∑–∞—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è —É—Å–ª–æ–≤–∏—è—Ç–∞ –∑–∞ –ø—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∞."},
        {"q": "–î–∏—Å–ø–æ–∑–∏—Ü–∏—è—Ç–∞ –º–æ–∂–µ –¥–∞ –ø—Ä–µ–¥–ø–∏—Å–≤–∞:", "answers": ["–°–∞–º–æ –ø—Ä–∞–≤–∞", "–°–∞–º–æ –∑–∞–¥—ä–ª–∂–µ–Ω–∏—è", "–ü—Ä–∞–≤–∞, –∑–∞–¥—ä–ª–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–±—Ä–∞–Ω–∏", "–°–∞–º–æ —Å–∞–Ω–∫—Ü–∏–∏"], "correctIndex": 2, "explanation": "–î–∏—Å–ø–æ–∑–∏—Ü–∏—è—Ç–∞ –º–æ–∂–µ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ –≤–∏–¥–æ–≤–µ –ø—Ä–∞–≤–∏–ª–∞."}
      ],
      "examples": ["–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è—Ç–∞ –∫–∞—Ç–æ –≤—ä—Ä—Ö–æ–≤–µ–Ω –∏–∑—Ç–æ—á–Ω–∏–∫ –Ω–∞ –ø—Ä–∞–≤–æ—Ç–æ –≤ –ë—ä–ª–≥–∞—Ä–∏—è - —á–ª. 5 –ö–†–ë", "–ü–æ–¥–∑–∞–∫–æ–Ω–æ–≤–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∏ –∞–∫—Ç–æ–≤–µ ‚Äì –ø—Ä–∏–º–µ—Ä: –ù–∞—Ä–µ–¥–±–∞ ‚Ññ1 –Ω–∞ –ú–û–ù –∑–∞ —É—á–µ–±–Ω–æ—Ç–æ –≤—Ä–µ–º–µ"],
      "links": ["https://bg.wikipedia.org/wiki/–ü—Ä–∞–≤–æ"]
    },
    {
      "id": 2,
      "title": "–°—É–±–µ–∫—Ç–∏ –Ω–∞ –ø—Ä–∞–≤–æ—Ç–æ ‚Äì –ø–æ–Ω—è—Ç–∏–µ –∏ –≤–∏–¥–æ–≤–µ. –§–∏–∑–∏—á–µ—Å–∫–∏ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –ª–∏—Ü–∞.",
      "theory": `
        <div class="topic-section">
          <h3>üë• –ü–æ–Ω—è—Ç–∏–µ –∑–∞ —Å—É–±–µ–∫—Ç–∏ –Ω–∞ –ø—Ä–∞–≤–æ—Ç–æ</h3>
          <p><span class="term" data-tooltip="–ù–æ—Å–∏—Ç–µ–ª –Ω–∞ —Å—É–±–µ–∫—Ç–∏–≤–Ω–∏ –ø—Ä–∞–≤–∞ –∏ –∑–∞–¥—ä–ª–∂–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ç–∞">–°—É–±–µ–∫—Ç –Ω–∞ –ø—Ä–∞–≤–æ—Ç–æ</span> –µ –≤—Å–µ–∫–∏ –Ω–æ—Å–∏—Ç–µ–ª –Ω–∞ –ø—Ä–∞–≤–∞ –∏ –∑–∞–¥—ä–ª–∂–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–Ω–∏—Ç–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.</p>
          
          <h3>üìã –í–∏–¥–æ–≤–µ —Å—É–±–µ–∫—Ç–∏</h3>
          <div class="subjects-grid">
            <div class="subject-card">
              <h4>üë§ –§–∏–∑–∏—á–µ—Å–∫–∏ –ª–∏—Ü–∞</h4>
              <ul>
                <li><span class="term" data-tooltip="–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç –¥–∞ —Å–µ –ø—Ä–∏—Ç–µ–∂–∞–≤–∞—Ç –ø—Ä–∞–≤–∞ –∏ –¥–∞ —Å–µ –ø–æ–µ–º–∞—Ç –∑–∞–¥—ä–ª–∂–µ–Ω–∏—è">–ü—Ä–∞–≤–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç</span> - –æ—Ç —Ä–∞–∂–¥–∞–Ω–µ—Ç–æ –¥–æ —Å–º—ä—Ä—Ç—Ç–∞</li>
                <li><span class="term" data-tooltip="–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç –¥–∞ —Å–µ —É–ø—Ä–∞–∂–Ω—è–≤–∞—Ç –ø—Ä–∞–≤–∞ —á—Ä–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è">–î–µ–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç</span> - –ø—ä–ª–Ω–∞ –æ—Ç 18 –≥–æ–¥–∏–Ω–∏</li>
                <li><span class="term" data-tooltip="–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç –¥–∞ —Å–µ –Ω–æ—Å–∏ –æ—Ç–≥–æ–≤–æ—Ä–Ω–æ—Å—Ç –∑–∞ –≤—Ä–µ–¥–∏">–î–µ–ª–∏–∫—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç</span> - –æ—Ç 14 –≥–æ–¥–∏–Ω–∏ –∑–∞ –¥–µ–ª–∏–∫—Ç–∏</li>
              </ul>
            </div>
            
            <div class="subject-card">
              <h4>üè¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏ –ª–∏—Ü–∞</h4>
              <ul>
                <li><span class="term" data-tooltip="–î—Ä—É–∂–µ—Å—Ç–≤–∞, –∫–æ–∏—Ç–æ —Ç—ä—Ä—Å—è—Ç –ø–µ—á–∞–ª–±–∞">–¢—ä—Ä–≥–æ–≤—Å–∫–∏ –¥—Ä—É–∂–µ—Å—Ç–≤–∞</span> - –ï–¢, –û–û–î, –ê–î, –ï–ê–î –∏ –¥—Ä.</li>
                <li><span class="term" data-tooltip="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±—â–µ—Å—Ç–≤–µ–Ω–æ-–ø–æ–ª–µ–∑–Ω–∞ —Ü–µ–ª">–Æ–õ–ù–¶</span> - —Å–¥—Ä—É–∂–µ–Ω–∏—è, —Ñ–æ–Ω–¥–∞—Ü–∏–∏</li>
                <li><span class="term" data-tooltip="–°—É–±–µ–∫—Ç —Å –ø—É–±–ª–∏—á–Ω–æ-–ø—Ä–∞–≤–µ–Ω —Å—Ç–∞—Ç—É—Ç">–î—ä—Ä–∂–∞–≤–∞—Ç–∞</span> –∫–∞—Ç–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ –ª–∏—Ü–µ</li>
                <li><span class="term" data-tooltip="–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏ –µ–¥–∏–Ω–∏—Ü–∏">–û–±—â–∏–Ω–∏</span> –∏ –æ–±–ª–∞—Å—Ç–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</li>
              </ul>
            </div>
          </div>
        </div>
      `,
      "flashcards": [
        {"term": "–ü—Ä–∞–≤–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç", "definition": "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—Ç–∞ –¥–∞ –±—ä–¥–µ—à –Ω–æ—Å–∏—Ç–µ–ª –Ω–∞ –ø—Ä–∞–≤–∞ –∏ –∑–∞–¥—ä–ª–∂–µ–Ω–∏—è. –í—ä–∑–Ω–∏–∫–≤–∞ —Å —Ä–∞–∂–¥–∞–Ω–µ—Ç–æ."},
        {"term": "–î–µ–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç", "definition": "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—Ç–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª–Ω–æ –¥–∞ —É–ø—Ä–∞–∂–Ω—è–≤–∞—à –ø—Ä–∞–≤–∞ –∏ –ø–æ–µ–º–∞—à –∑–∞–¥—ä–ª–∂–µ–Ω–∏—è."},
        {"term": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ –ª–∏—Ü–µ", "definition": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø—Ä–∏–∑–Ω–∞—Ç–∞ –æ—Ç –∑–∞–∫–æ–Ω–∞ –∫–∞—Ç–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª–µ–Ω —Å—É–±–µ–∫—Ç –Ω–∞ –ø—Ä–∞–≤–æ—Ç–æ."}
      ],
      "quiz": [
        {"q": "–û—Ç –∫–æ–π –º–æ–º–µ–Ω—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ—Ç–æ –ª–∏—Ü–µ –ø—Ä–∏–¥–æ–±–∏–≤–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∞ –ø—Ä–∞–≤–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç?", "answers": ["–û—Ç –∑–∞—á–µ–≤–∞–Ω–µ—Ç–æ", "–û—Ç —Ä–∞–∂–¥–∞–Ω–µ—Ç–æ", "–û—Ç 18 –≥–æ–¥–∏–Ω–∏", "–û—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞"], "correctIndex": 1, "explanation": "–ß–ª. 1 –ó–õ–° - –ø—Ä–∞–≤–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—Ç–∞ –≤—ä–∑–Ω–∏–∫–≤–∞ —Å —Ä–∞–∂–¥–∞–Ω–µ—Ç–æ."},
        {"q": "–ü—ä–ª–Ω–æ–ª–µ—Ç–∏–µ—Ç–æ –≤ –ë—ä–ª–≥–∞—Ä–∏—è —Å–µ –¥–æ—Å—Ç–∏–≥–∞ –Ω–∞:", "answers": ["16 –≥–æ–¥–∏–Ω–∏", "17 –≥–æ–¥–∏–Ω–∏", "18 –≥–æ–¥–∏–Ω–∏", "21 –≥–æ–¥–∏–Ω–∏"], "correctIndex": 2, "explanation": "–ß–ª. 4 –ó–õ–° –æ–ø—Ä–µ–¥–µ–ª—è –ø—ä–ª–Ω–æ–ª–µ—Ç–∏–µ—Ç–æ –Ω–∞ 18 –≥–æ–¥–∏–Ω–∏."}
      ],
      "examples": ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –ï–ì–ù –ø—Ä–∏ —Ä–∞–∂–¥–∞–Ω–µ –Ω–∞ –¥–µ—Ç–µ –≤ –ù–°–ò"],
      "links": ["https://bg.wikipedia.org/wiki/–§–∏–∑–∏—á–µ—Å–∫–æ_–ª–∏—Ü–µ"]
    }
    // –û—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ —Ç–µ–º–∏ —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–∞—Ç –¥–æ–ø—ä–ª–Ω–µ–Ω–∏ —Å —Ä–µ–∞–ª–Ω–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ
  ]
};

// =========================================================
// –°—ä—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ
// =========================================================
const progressMap = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞
function initProgress() {
  TOPICS_DATA.topics.forEach(t => {
    progressMap[t.id] = { read: false, quizScore: 0 };
  });
}

// –ü–æ–º–æ—â–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
function shuffle(arr) {
  return [...arr].sort(() => Math.random() - 0.5);
}

function calcCompletedPercentage() {
  const total = TOPICS_DATA.topics.length;
  const completed = Object.values(progressMap).filter(p => p.quizScore >= 80).length;
  return { completed, total, percent: Math.round((completed / total) * 100) };
}

function showErrorMessage(message) {
  console.error('–ì—Ä–µ—à–∫–∞:', message);
  const errorDiv = document.createElement('div');
  errorDiv.className = 'error-message';
  errorDiv.style.cssText = `
    position: fixed; top: 20px; left: 50%; transform: translateX(-50%);
    background: #fee; color: #c33; padding: 1rem; border-radius: 4px;
    border: 1px solid #fcc; z-index: 9999;
  `;
  errorDiv.textContent = message;
  document.body.prepend(errorDiv);
  
  setTimeout(() => {
    if (errorDiv.parentNode) {
      errorDiv.parentNode.removeChild(errorDiv);
    }
  }, 5000);
}

// DOM –µ–ª–µ–º–µ–Ω—Ç–∏
let sidebar, topicsList, menuToggle, progressFill, progressText;
let topicTitleEl, topicContentEl, topicBadgeEl;
let startQuizBtn, markCompleteBtn;
let quizModal, closeModalBtn;
let tooltip, successAnimation;

// Quiz runtime
let currentTopic = null;
let quizData = [];
let shuffledQuestions = [];
let currentQIndex = 0;
let selectedAnswers = [];

// Flashcards runtime
let flashIndex = 0;
let flashFlipped = false;

// =========================================================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å error handling
// =========================================================
document.addEventListener('DOMContentLoaded', () => {
  try {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ...');
    
    cacheDom();
    
    if (!sidebar) {
      throw new Error('–õ–∏–ø—Å–≤–∞ sidebar element - –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞');
    }
    
    initProgress();
    buildSidebar();
    attachGlobalEvents();
    
    // –ë–µ–∑–æ–ø–∞—Å–µ–Ω –∏–∑–±–æ—Ä –Ω–∞ –ø—ä—Ä–≤–∞—Ç–∞ —Ç–µ–º–∞
    if (TOPICS_DATA.topics && TOPICS_DATA.topics.length > 0) {
      selectTopic(TOPICS_DATA.topics[0]);
    } else {
      throw new Error('–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ —Ç–µ–º–∏ –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ');
    }
    
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –µ –∑–∞—Ä–µ–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ:', error);
    showErrorMessage('–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ: ' + error.message);
  }
});

function cacheDom() {
  sidebar = document.getElementById('sidebar');
  topicsList = document.getElementById('topicsList');
  menuToggle = document.getElementById('menuToggle');
  progressFill = document.getElementById('progressFill');
  progressText = document.getElementById('progressText');
  
  topicTitleEl = document.getElementById('topicTitle');
  topicContentEl = document.getElementById('topicContent');
  topicBadgeEl = document.getElementById('topicBadge');
  
  startQuizBtn = document.getElementById('startQuizBtn');
  markCompleteBtn = document.getElementById('markCompleteBtn');
  
  quizModal = document.getElementById('quizModal');
  closeModalBtn = document.getElementById('closeModalBtn');
  
  tooltip = document.getElementById('tooltip');
  successAnimation = document.getElementById('successAnimation');

  // Reset progress –±—É—Ç–æ–Ω
  const resetBtn = document.getElementById('resetProgress');
  if (resetBtn) {
    resetBtn.addEventListener('click', resetProgress);
  }
}

function attachGlobalEvents() {
  // Sidebar toggle –∑–∞ –º–æ–±–∏–ª–Ω–∏
  if (menuToggle) {
    menuToggle.addEventListener('click', () => {
      sidebar.classList.toggle('open');
      const isOpen = sidebar.classList.contains('open');
      menuToggle.setAttribute('aria-expanded', isOpen.toString());
    });
  }

  // Quiz modal –∑–∞—Ç–≤–∞—Ä—è–Ω–µ - –§–ò–ö–°–ò–†–ê–ù–û
  if (closeModalBtn) {
    closeModalBtn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      closeQuizModal();
    });
  }
  
  if (quizModal) {
    quizModal.addEventListener('click', (e) => {
      if (e.target === quizModal || e.target.classList.contains('modal__overlay')) {
        e.preventDefault();
        e.stopPropagation();
        closeQuizModal();
      }
    });
  }

  // Tooltip —Å—ä–±–∏—Ç–∏—è
  document.addEventListener('mouseover', maybeShowTooltip);
  document.addEventListener('mouseout', maybeHideTooltip);
  document.addEventListener('mousemove', (e) => {
    if (tooltip && !tooltip.classList.contains('hidden')) {
      positionTooltip(e);
    }
  });

  // Escape key –∑–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª - –§–ò–ö–°–ò–†–ê–ù–û
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      e.preventDefault();
      if (quizModal && !quizModal.classList.contains('hidden')) {
        closeQuizModal();
      }
    }
  });
}

// =========================================================
// Sidebar –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
// =========================================================
function buildSidebar() {
  if (!topicsList) {
    console.warn('Topics list element not found');
    return;
  }
  
  topicsList.innerHTML = '';
  TOPICS_DATA.topics.forEach((topic, index) => {
    const li = document.createElement('li');
    const btn = document.createElement('button');
    btn.className = 'sidebar__item';
    btn.innerHTML = `${topic.title}`;
    btn.setAttribute('role', 'menuitem');
    btn.setAttribute('tabindex', '0');
    
    btn.addEventListener('click', () => {
      selectTopic(topic);
      // –ó–∞—Ç–≤–∞—Ä—è–º–µ sidebar –Ω–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      if (window.innerWidth <= 768 && sidebar) {
        sidebar.classList.remove('open');
        if (menuToggle) {
          menuToggle.setAttribute('aria-expanded', 'false');
        }
      }
    });

    // Keyboard navigation
    btn.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        btn.click();
      }
    });
    
    li.appendChild(btn);
    topicsList.appendChild(li);
  });
  
  refreshSidebarStatus();
  updateProgressBar();
}

function refreshSidebarStatus() {
  if (!topicsList) return;
  
  const buttons = topicsList.querySelectorAll('.sidebar__item');
  buttons.forEach((btn, idx) => {
    const topic = TOPICS_DATA.topics[idx];
    if (!topic) return;
    
    const progress = progressMap[topic.id];
    btn.classList.remove('active', 'completed');

    if (progress && progress.quizScore >= 80) {
      btn.classList.add('completed');
    }
  });
}

function updateProgressBar() {
  const { percent, completed, total } = calcCompletedPercentage();
  if (progressFill) progressFill.style.width = `${percent}%`;
  if (progressText) progressText.textContent = `${completed}/${total}`;
  
  if (percent === 100) {
    setTimeout(() => showSuccessAnimation(), 500);
  }
}

// =========================================================
// –ò–∑–±–æ—Ä –Ω–∞ —Ç–µ–º–∞ —Å error handling
// =========================================================
function selectTopic(topic) {
  if (!topic || !topic.id) {
    console.error('Invalid topic provided');
    showErrorMessage('–ù–µ–≤–∞–ª–∏–¥–Ω–∞ —Ç–µ–º–∞');
    return;
  }
  
  console.log('–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç–µ–º–∞:', topic.title);
  currentTopic = topic;
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–±–µ–ª—è–∑–≤–∞–Ω–µ –∫–∞—Ç–æ –ø—Ä–æ—á–µ—Ç–µ–Ω–∞
  if (progressMap[topic.id]) {
    progressMap[topic.id].read = true;
  }
  
  refreshSidebarStatus();
  updateProgressBar();

  // –ê–∫—Ç–∏–≤–Ω–∞ —Ç–µ–º–∞ –≤ sidebar
  if (topicsList) {
    const btns = topicsList.querySelectorAll('.sidebar__item');
    btns.forEach((b) => b.classList.remove('active'));
    const idx = TOPICS_DATA.topics.findIndex((t) => t.id === topic.id);
    if (btns[idx]) btns[idx].classList.add('active');
  }

  // –ó–∞–≥–ª–∞–≤–∏–µ
  if (topicTitleEl) topicTitleEl.textContent = topic.title;

  // –°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ
  renderTopicContent(topic);

  // Badge –∑–∞ —Å—Ç–∞—Ç—É—Å
  updateTopicBadge();

  // –ë—É—Ç–æ–Ω–∏ –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ
  if (startQuizBtn) {
    startQuizBtn.onclick = (e) => {
      e.preventDefault();
      console.log('–°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç...');
      startQuiz();
    };
  }
  
  if (markCompleteBtn) {
    markCompleteBtn.onclick = (e) => {
      e.preventDefault();
      console.log('–û—Ç–±–µ–ª—è–∑–≤–∞–Ω–µ –Ω–∞ —Ç–µ–º–∞...');
      markTopicComplete();
    };
  }
}

function updateTopicBadge() {
  if (!topicBadgeEl || !currentTopic) return;
  
  const prog = progressMap[currentTopic.id];
  if (!prog) return;
  
  if (prog.quizScore >= 80) {
    topicBadgeEl.textContent = `‚úì –¢–µ—Å—Ç: ${prog.quizScore}%`;
    topicBadgeEl.style.display = 'inline-block';
  } else if (prog.read) {
    topicBadgeEl.textContent = 'üìñ –ü—Ä–æ—á–µ—Ç–µ–Ω–∞';
    topicBadgeEl.style.display = 'inline-block';
  } else {
    topicBadgeEl.style.display = 'none';
  }
}

function renderTopicContent(topic) {
  if (!topicContentEl) {
    console.warn('Topic content element not found');
    return;
  }
  
  let html = '';
  
  // –û—Å–Ω–æ–≤–Ω–æ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ
  html += topic.theory || '<div class="topic-section"><p>–°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ —â–µ –±—ä–¥–µ –¥–æ–±–∞–≤–µ–Ω–æ —Å–∫–æ—Ä–æ...</p></div>';

  // –§–ª–∞—à–∫–∞—Ä—Ç–∏
  if (topic.flashcards && topic.flashcards.length > 0) {
    html += renderFlashcardsSection(topic);
  }

  // –¢–µ—Å—Ç
  if (topic.quiz && topic.quiz.length > 0) {
    html += renderQuizSection(topic);
  }

  // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ—Ä–∏
  if (topic.examples && topic.examples.length > 0) {
    html += renderExamplesSection(topic);
  }

  // –ü–æ–ª–µ–∑–Ω–∏ –ª–∏–Ω–∫–æ–≤–µ
  if (topic.links && topic.links.length > 0) {
    html += renderLinksSection(topic);
  }

  topicContentEl.innerHTML = html;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Ñ–ª–∞—à–∫–∞—Ä—Ç–∏—Ç–µ
  if (topic.flashcards && topic.flashcards.length > 0) {
    setTimeout(() => initFlashcards(topic), 100);
  }
}

function renderFlashcardsSection(topic) {
  const firstCard = topic.flashcards[0];
  return `
    <details class="topic-section" style="margin-top: 2rem;">
      <summary style="font-weight: 600; cursor: pointer; margin-bottom: 1rem;"><strong>üß† –§–ª–µ—à–∫–∞—Ä—Ç–∏</strong></summary>
      <div class="flashcard-container" style="display: flex; flex-direction: column; align-items: center; gap: 1rem; padding: 1rem 0;">
        <div id="flashcard" class="flashcard">
          <div class="flashcard-inner" id="flashcardInner">
            <div class="front">
              ${firstCard.term}
            </div>
            <div class="back">
              ${firstCard.definition}
            </div>
          </div>
        </div>
        <div class="flash-controls">
          <button id="prevFlash" class="btn btn--sm btn--secondary">‚¨Ö –ù–∞–∑–∞–¥</button>
          <button id="flipFlash" class="btn btn--sm btn--primary">üîÑ –û–±—ä—Ä–Ω–∏</button>
          <button id="nextFlash" class="btn btn--sm btn--secondary">–ù–∞–ø—Ä–µ–¥ ‚û°</button>
        </div>
        <div id="flashCounter" style="font-size: 0.9rem; color: #718096;">1 / ${topic.flashcards.length}</div>
      </div>
    </details>`;
}

function renderQuizSection(topic) {
  const progress = progressMap[topic.id] || { quizScore: 0 };
  return `
    <details class="topic-section" style="margin-top: 2rem;">
      <summary style="font-weight: 600; cursor: pointer; margin-bottom: 1rem;">
        <strong>üéØ –¢–µ—Å—Ç ${topic.quiz.length} –≤—ä–ø—Ä–æ—Å–∞</strong>
        ${progress.quizScore > 0 ? ` - –ü–æ—Å–ª–µ–¥–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç: ${progress.quizScore}%` : ''}
      </summary>
      <p>–¢–µ—Å—Ç—ä—Ç —Å—ä–¥—ä—Ä–∂–∞ ${topic.quiz.length} –≤—ä–ø—Ä–æ—Å–∞. –ó–∞ –¥–∞ –ø—Ä–µ–º–∏–Ω–µ—Ç–µ —Ç–µ–º–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ, —Ç—Ä—è–±–≤–∞ –¥–∞ –ø–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ –ø–æ–Ω–µ 80%.</p>
      <button class="btn btn--primary" onclick="LawApp.startQuiz()">
        üéØ –ó–∞–ø–æ—á–Ω–∏ —Ç–µ—Å—Ç–∞
      </button>
    </details>`;
}

function renderExamplesSection(topic) {
  return `
    <details class="topic-section" style="margin-top: 2rem;">
      <summary style="font-weight: 600; cursor: pointer; margin-bottom: 1rem;"><strong>üõ†Ô∏è –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ—Ä–∏</strong></summary>
      <ul style="margin-left: 1rem;">
        ${topic.examples.map((ex) => `<li style="margin-bottom: 0.5rem;">${ex}</li>`).join('')}
      </ul>
    </details>`;
}

function renderLinksSection(topic) {
  return `
    <details class="topic-section" style="margin-top: 2rem;">
      <summary style="font-weight: 600; cursor: pointer; margin-bottom: 1rem;"><strong>üîó –ü–æ–ª–µ–∑–Ω–∏ –ª–∏–Ω–∫–æ–≤–µ</strong></summary>
      <ul style="margin-left: 1rem;">
        ${topic.links.map((link) => `<li style="margin-bottom: 0.5rem;"><a href="${link}" target="_blank" rel="noopener">${link}</a></li>`).join('')}
      </ul>
    </details>`;
}

function markTopicComplete() {
  if (!currentTopic) return;
  
  const progress = progressMap[currentTopic.id];
  if (!progress) return;
  
  const isCompleted = progress.read;
  if (isCompleted) {
    progress.read = false;
    progress.quizScore = 0;
  } else {
    progress.read = true;
  }
  
  refreshSidebarStatus();
  updateProgressBar();
  updateTopicBadge();
}

// =========================================================
// –§–ª–∞—à–∫–∞—Ä—Ç–∏ —Å –ø–æ–¥–æ–±—Ä–µ–Ω–æ error handling
// =========================================================
function initFlashcards(topic) {
  if (!topic || !topic.flashcards || topic.flashcards.length === 0) {
    console.warn('No flashcards available for topic');
    return;
  }
  
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Ñ–ª–∞—à–∫–∞—Ä—Ç–∏ –∑–∞:', topic.title);
  
  const flashcardEl = document.getElementById('flashcard');
  const prevBtn = document.getElementById('prevFlash');
  const nextBtn = document.getElementById('nextFlash');
  const flipBtn = document.getElementById('flipFlash');
  const counterEl = document.getElementById('flashCounter');
  const innerEl = document.getElementById('flashcardInner');
  
  if (!flashcardEl || !innerEl) {
    console.warn('Flashcard elements not found');
    return;
  }
  
  flashIndex = 0;
  flashFlipped = false;

  function renderFlashcard() {
    if (flashIndex < 0 || flashIndex >= topic.flashcards.length) {
      console.error('Invalid flashcard index:', flashIndex);
      return;
    }
    
    const card = topic.flashcards[flashIndex];
    const front = flashcardEl.querySelector('.front');
    const back = flashcardEl.querySelector('.back');
    
    if (front) front.textContent = card.term;
    if (back) back.textContent = card.definition;
    if (counterEl) counterEl.textContent = `${flashIndex + 1} / ${topic.flashcards.length}`;
    
    // –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è—Ç–∞
    flashFlipped = false;
    innerEl.style.transform = 'rotateY(0deg)';
  }

  function flipCard() {
    flashFlipped = !flashFlipped;
    innerEl.style.transform = flashFlipped ? 'rotateY(180deg)' : 'rotateY(0deg)';
  }

  // Event listeners —Å –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ä–∏
  if (prevBtn) {
    prevBtn.replaceWith(prevBtn.cloneNode(true));
    document.getElementById('prevFlash').addEventListener('click', (e) => {
      e.preventDefault();
      flashIndex = (flashIndex - 1 + topic.flashcards.length) % topic.flashcards.length;
      renderFlashcard();
    });
  }
  
  if (nextBtn) {
    nextBtn.replaceWith(nextBtn.cloneNode(true));
    document.getElementById('nextFlash').addEventListener('click', (e) => {
      e.preventDefault();
      flashIndex = (flashIndex + 1) % topic.flashcards.length;
      renderFlashcard();
    });
  }
  
  if (flipBtn) {
    flipBtn.replaceWith(flipBtn.cloneNode(true));
    document.getElementById('flipFlash').addEventListener('click', (e) => {
      e.preventDefault();
      flipCard();
    });
  }
  
  if (flashcardEl) {
    // Clone to remove old listeners
    const newFlashcard = flashcardEl.cloneNode(true);
    flashcardEl.parentNode.replaceChild(newFlashcard, flashcardEl);
    newFlashcard.addEventListener('click', flipCard);
  }

  renderFlashcard();
}

// =========================================================
// Quiz —Å–∏—Å—Ç–µ–º–∞ - –§–ò–ö–°–ò–†–ê–ù–ê –∏ –ø–æ–¥–æ–±—Ä–µ–Ω–∞
// =========================================================
function startQuiz() {
  console.log('–°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç –∑–∞:', currentTopic?.title);
  
  if (!currentTopic || !currentTopic.quiz || currentTopic.quiz.length === 0) {
    showErrorMessage('–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ —Ç–∞–∑–∏ —Ç–µ–º–∞.');
    return;
  }

  try {
    quizData = currentTopic.quiz;
    shuffledQuestions = shuffle([...quizData]);
    currentQIndex = 0;
    selectedAnswers = new Array(shuffledQuestions.length).fill(null);
    
    openQuizModal();
    renderQuizQuestion();
  } catch (error) {
    console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç:', error);
    showErrorMessage('–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–∞.');
  }
}

function openQuizModal() {
  if (!quizModal) {
    console.error('Quiz modal element not found');
    return;
  }
  
  console.log('–û—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª –∑–∞ —Ç–µ—Å—Ç...');
  quizModal.classList.remove('hidden');
  document.body.style.overflow = 'hidden';
  
  // Focus management
  setTimeout(() => {
    const firstFocusable = quizModal.querySelector('button:not([disabled]), input:not([disabled])');
    if (firstFocusable) {
      firstFocusable.focus();
    }
  }, 100);
}

function closeQuizModal() {
  console.log('–ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª –∑–∞ —Ç–µ—Å—Ç...');
  if (quizModal) {
    quizModal.classList.add('hidden');
    document.body.style.overflow = '';
    
    // Return focus to quiz button
    setTimeout(() => {
      if (startQuizBtn) {
        startQuizBtn.focus();
      }
    }, 100);
  }
}

function renderQuizQuestion() {
  if (!quizModal || !shuffledQuestions || shuffledQuestions.length === 0) {
    console.warn('No quiz modal or questions');
    return;
  }
  
  if (currentQIndex < 0 || currentQIndex >= shuffledQuestions.length) {
    console.error('Invalid question index:', currentQIndex);
    return;
  }
  
  console.log(`–ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å ${currentQIndex + 1}`);
  
  const q = shuffledQuestions[currentQIndex];
  const body = quizModal.querySelector('.modal__body');
  const footer = quizModal.querySelector('.modal__footer');
  const progress = quizModal.querySelector('#quizProgress');
  const heading = quizModal.querySelector('#quizHeading');

  if (heading) heading.textContent = `üéØ –í—ä–ø—Ä–æ—Å ${currentQIndex + 1}`;
  if (progress) progress.textContent = `${currentQIndex + 1} –æ—Ç ${shuffledQuestions.length}`;

  if (body) {
    const inputType = Array.isArray(q.correctIndex) ? 'checkbox' : 'radio';
    const inputName = Array.isArray(q.correctIndex) ? 'quizAnswers' : 'quizAnswer';
    
    body.innerHTML = `
      <div class="quiz-question">${q.q}</div>
      <ul class="quiz-options">
        ${q.answers
          .map(
            (choice, i) => `
            <li>
              <label>
                <input type="${inputType}" name="${inputName}" value="${i}" ${
                  Array.isArray(q.correctIndex) 
                    ? (selectedAnswers[currentQIndex] && selectedAnswers[currentQIndex].includes(i) ? 'checked' : '')
                    : (selectedAnswers[currentQIndex] === i ? 'checked' : '')
                }>
                <span>${choice}</span>
              </label>
            </li>`
          )
          .join('')}
      </ul>`;

    // –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞
    const inputs = body.querySelectorAll(`input[name="${inputName}"]`);
    inputs.forEach((input) => {
      input.addEventListener('change', (e) => {
        if (Array.isArray(q.correctIndex)) {
          // Multi-choice
          if (!selectedAnswers[currentQIndex]) selectedAnswers[currentQIndex] = [];
          if (e.target.checked) {
            if (!selectedAnswers[currentQIndex].includes(parseInt(e.target.value))) {
              selectedAnswers[currentQIndex].push(parseInt(e.target.value));
            }
          } else {
            selectedAnswers[currentQIndex] = selectedAnswers[currentQIndex].filter(x => x !== parseInt(e.target.value));
          }
        } else {
          // Single choice
          selectedAnswers[currentQIndex] = parseInt(e.target.value);
        }
        
        // –í–∏–∑—É–∞–ª–µ–Ω feedback
        updateQuestionStyles(body, inputName);
      });
    });
    
    // Initial styles
    updateQuestionStyles(body, inputName);
  }

  if (footer) {
    footer.innerHTML = `
      ${currentQIndex > 0 ? '<button class="btn btn--secondary" id="prevQuestion">‚¨Ö –ù–∞–∑–∞–¥</button>' : '<span></span>'}
      <button class="btn btn--primary" id="nextQuestion">${currentQIndex === shuffledQuestions.length - 1 ? 'üèÅ –ó–∞–≤—ä—Ä—à–∏' : '–ù–∞–ø—Ä–µ–¥ ‚û°'}</button>
    `;

    const prevBtn = footer.querySelector('#prevQuestion');
    const nextBtn = footer.querySelector('#nextQuestion');
    
    if (prevBtn) {
      prevBtn.onclick = (e) => {
        e.preventDefault();
        currentQIndex--;
        renderQuizQuestion();
      };
    }
    
    if (nextBtn) {
      nextBtn.onclick = (e) => {
        e.preventDefault();
        if (currentQIndex === shuffledQuestions.length - 1) {
          finishQuiz();
        } else {
          currentQIndex++;
          renderQuizQuestion();
        }
      };
    }
  }
}

function updateQuestionStyles(body, inputName) {
  const labels = body.querySelectorAll('label');
  labels.forEach(label => {
    const input = label.querySelector('input');
    if (input && input.checked) {
      label.style.borderColor = 'var(--color-primary)';
      label.style.background = 'var(--gradient-subtle)';
    } else {
      label.style.borderColor = 'var(--color-border-light)';
      label.style.background = 'transparent';
    }
  });
}

function finishQuiz() {
  if (!shuffledQuestions || !selectedAnswers) {
    console.error('Quiz data is invalid');
    showErrorMessage('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ');
    return;
  }
  
  console.log('–ó–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–∞...');
  let correct = 0;
  
  shuffledQuestions.forEach((q, i) => {
    const userAnswer = selectedAnswers[i];
    
    if (Array.isArray(q.correctIndex)) {
      // Multi-choice –≤—ä–ø—Ä–æ—Å
      const userAnswers = userAnswer || [];
      const correctAnswers = q.correctIndex;
      
      if (arraysEqual(userAnswers.sort(), correctAnswers.sort())) {
        correct++;
      }
    } else {
      // Single choice –≤—ä–ø—Ä–æ—Å
      if (userAnswer === q.correctIndex) {
        correct++;
      }
    }
  });
  
  const percent = Math.round((correct / shuffledQuestions.length) * 100);
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
  if (currentTopic && currentTopic.id && progressMap[currentTopic.id]) {
    progressMap[currentTopic.id].quizScore = percent;
  }
  
  console.log(`–†–µ–∑—É–ª—Ç–∞—Ç: ${correct}/${shuffledQuestions.length} (${percent}%)`);
  
  refreshSidebarStatus();
  updateProgressBar();
  updateTopicBadge();
  
  showQuizResults(correct, percent);
}

// –ü–æ–º–æ—â–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Å—Ä–∞–≤–Ω—è–≤–∞–Ω–µ –Ω–∞ –º–∞—Å–∏–≤–∏
function arraysEqual(a, b) {
  return Array.isArray(a) && Array.isArray(b) && 
         a.length === b.length && 
         a.every((val, i) => val === b[i]);
}

function showQuizResults(score, percent) {
  const body = quizModal.querySelector('.modal__body');
  const footer = quizModal.querySelector('.modal__footer');
  const heading = quizModal.querySelector('#quizHeading');
  const progress = quizModal.querySelector('#quizProgress');

  if (heading) heading.textContent = 'üéâ –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç —Ç–µ—Å—Ç–∞';
  if (progress) progress.textContent = '';

  const emoji = percent >= 80 ? 'üèÜ' : percent >= 60 ? 'üòä' : percent >= 40 ? 'üòê' : 'üòû';
  const message = percent >= 80 ? '–û—Ç–ª–∏—á–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç!' : percent >= 60 ? '–î–æ–±—ä—Ä —Ä–µ–∑—É–ª—Ç–∞—Ç!' : '–ú–æ–∂–µ—Ç–µ –¥–∞ —Å–µ –ø–æ–¥–æ–±—Ä–∏—Ç–µ!';

  let html = `
    <div class="result-summary">
      <div style="font-size: 3rem; margin-bottom: 1rem;">${emoji}</div>
      <h3>${message}</h3>
      <p style="font-size: 1.2rem;">–í–µ—Ä–Ω–∏ –æ—Ç–≥–æ–≤–æ—Ä–∏: <strong>${score}</strong> –æ—Ç ${shuffledQuestions.length} (<strong>${percent}%</strong>)</p>
    </div>
    
    <h4>–ü–æ–¥—Ä–æ–±–µ–Ω –ø—Ä–µ–≥–ª–µ–¥:</h4>
  `;

  shuffledQuestions.forEach((q, i) => {
    const userAnswer = selectedAnswers[i];
    let isCorrect = false;
    
    if (Array.isArray(q.correctIndex)) {
      const userAnswers = userAnswer || [];
      const correctAnswers = q.correctIndex;
      isCorrect = arraysEqual(userAnswers.sort(), correctAnswers.sort());
    } else {
      isCorrect = userAnswer === q.correctIndex;
    }
    
    let userAnswerText = '–ë–µ–∑ –æ—Ç–≥–æ–≤–æ—Ä';
    if (Array.isArray(q.correctIndex)) {
      if (userAnswer && userAnswer.length > 0) {
        userAnswerText = userAnswer.map(idx => q.answers[idx]).join(', ');
      }
    } else {
      if (userAnswer !== null && userAnswer !== undefined) {
        userAnswerText = q.answers[userAnswer];
      }
    }
    
    let correctAnswerText = '';
    if (Array.isArray(q.correctIndex)) {
      correctAnswerText = q.correctIndex.map(idx => q.answers[idx]).join(', ');
    } else {
      correctAnswerText = q.answers[q.correctIndex];
    }
    
    html += `
      <div class="question-result ${isCorrect ? 'correct' : 'incorrect'}">
        <p><strong>–í—ä–ø—Ä–æ—Å ${i + 1}:</strong> ${q.q}</p>
        <p><strong>–í–∞—à–∏—è—Ç –æ—Ç–≥–æ–≤–æ—Ä:</strong> ${userAnswerText} ${isCorrect ? '‚úì' : '‚úó'}</p>
        ${!isCorrect ? `<p><strong>–ü—Ä–∞–≤–∏–ª–Ω–∏—è—Ç –æ—Ç–≥–æ–≤–æ—Ä:</strong> ${correctAnswerText}</p>` : ''}
        <p><em>üí° –û–±—è—Å–Ω–µ–Ω–∏–µ:</em> ${q.explanation}</p>
      </div>
    `;
  });

  if (body) body.innerHTML = html;

  if (footer) {
    footer.innerHTML = `
      <button class="btn btn--secondary" id="retryQuiz">üîÑ –û–ø–∏—Ç–∞–π –æ—Ç–Ω–æ–≤–æ</button>
      <button class="btn btn--primary" id="closeQuiz">‚úì –ó–∞—Ç–≤–æ—Ä–∏</button>
    `;
    
    const retryBtn = footer.querySelector('#retryQuiz');
    const closeBtn = footer.querySelector('#closeQuiz');
    
    if (retryBtn) {
      retryBtn.onclick = (e) => {
        e.preventDefault();
        startQuiz();
      };
    }
    if (closeBtn) {
      closeBtn.onclick = (e) => {
        e.preventDefault();
        closeQuizModal();
      };
    }
  }
}

// =========================================================
// Tooltip —Å–∏—Å—Ç–µ–º–∞
// =========================================================
function maybeShowTooltip(e) {
  const termEl = e.target.closest('.term');
  if (termEl && termEl.dataset.tooltip && tooltip) {
    const content = tooltip.querySelector('.tooltip-content');
    if (content) content.textContent = termEl.dataset.tooltip;
    
    tooltip.classList.remove('hidden');
    tooltip.classList.add('visible');
    positionTooltip(e);
  }
}

function maybeHideTooltip(e) {
  if (!e.target.closest('.term') && tooltip) {
    tooltip.classList.add('hidden');
    tooltip.classList.remove('visible');
  }
}

function positionTooltip(e) {
  if (!tooltip) return;
  
  const offset = 12;
  const x = e.clientX + offset;
  const y = e.clientY - offset;
  
  tooltip.style.left = x + 'px';
  tooltip.style.top = y + 'px';
}

// =========================================================
// –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ
// =========================================================
function showSuccessAnimation() {
  if (!successAnimation || !successAnimation.classList.contains('hidden')) return;
  
  successAnimation.classList.remove('hidden');
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ —Å–ª–µ–¥ 4 —Å–µ–∫—É–Ω–¥–∏
  setTimeout(() => {
    successAnimation.classList.add('hidden');
  }, 4000);
  
  // Focus management
  const closeBtn = successAnimation.querySelector('button');
  if (closeBtn) closeBtn.focus();
}

// =========================================================
// Reset –ø—Ä–æ–≥—Ä–µ—Å
// =========================================================
function resetProgress() {
  if (confirm('–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –Ω—É–ª–∏—Ä–∞—Ç–µ —Ü–µ–ª–∏—è –ø—Ä–æ–≥—Ä–µ—Å?')) {
    TOPICS_DATA.topics.forEach(t => {
      progressMap[t.id] = { read: false, quizScore: 0 };
    });
    
    refreshSidebarStatus();
    updateProgressBar();
    updateTopicBadge();
    
    alert('–ü—Ä–æ–≥—Ä–µ—Å—ä—Ç –µ –Ω—É–ª–∏—Ä–∞–Ω!');
  }
}

// =========================================================
// Global functions - –º–æ–¥—É–ª–∞—Ä–∏–∑–∏—Ä–∞–Ω–∏
// =========================================================
const LawApp = {
  startQuiz: startQuiz,
  selectTopic: selectTopic,
  resetProgress: resetProgress,
  closeQuizModal: closeQuizModal
};

// –ó–∞ backward compatibility
window.LawApp = LawApp;
window.startQuiz = startQuiz;
